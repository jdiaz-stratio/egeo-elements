/**
 * @fileoverview added by tsickle
 * Generated from: lib/st-form/st-form-field/st-form-field.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * © 2017 Stratio Big Data Inc., Sucursal en España.
 *
 * This software is licensed under the Apache License, Version 2.0.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the terms of the License for more details.
 *
 * SPDX-License-Identifier: Apache-2.0.
 */
import { ChangeDetectionStrategy, Component, EventEmitter, forwardRef, HostBinding, Input, Output, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, NgModel } from '@angular/forms';
import { StEgeo, StRequired } from '../../decorators/require-decorators';
var StFormFieldComponent = /** @class */ (function () {
    function StFormFieldComponent() {
        this.required = false;
        this.showTooltip = true;
        // number of characters from witch inputs will be displayed as textarea
        this.valueChange = new EventEmitter();
        this.blur = new EventEmitter();
        this.disabled = false; // To check disable
        // To check disable
        this.focus = false;
        this.errorMessage = undefined;
        this._defaultErrorMessages = {
            generic: 'Error',
            required: 'This field is required',
            minLength: 'The field min length is ',
            maxLength: 'The field max length is ',
            min: 'The number has to be higher than ',
            max: 'The number has to be minor than ',
            pattern: 'Invalid value'
        };
        this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) {
        });
        this.onTouched = (/**
         * @return {?}
         */
        function () {
        });
    }
    StFormFieldComponent_1 = StFormFieldComponent;
    Object.defineProperty(StFormFieldComponent.prototype, "readOnly", {
        get: /**
         * @return {?}
         */
        function () {
            return this.schema && this.schema.value && this.schema.value.readOnly === true;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    StFormFieldComponent.prototype.setValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.onChange(value);
        this.valueChange.emit(value);
    };
    /**
     * @param {?} control
     * @return {?}
     */
    StFormFieldComponent.prototype.validate = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        if (this.templateModel && this.templateModel.control && this.templateModel.control.validator) {
            return this.templateModel.control.validator(control);
        }
    };
    /**
     * @return {?}
     */
    StFormFieldComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.schema.value && this.schema.value.enum) {
            this.selectOptions = this.getSelectOptions();
        }
        this._loadErrorMessages();
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.default !== undefined && (_this.innerValue === undefined || _this.innerValue === null)) {
                _this.innerValue = _this.default;
                _this.onChange(_this.innerValue);
            }
            if (_this.schema.value.readOnly) {
                _this.setDisabledState(true);
            }
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    StFormFieldComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.schema) {
            this.selectOptions = this.getSelectOptions();
        }
    };
    Object.defineProperty(StFormFieldComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            switch (this.schema.value.type) {
                case 'string':
                    if (!this.schema.value.enum) {
                        return 'text';
                    }
                    else {
                        return 'select';
                    }
                case 'integer':
                    return 'number';
                default:
                    return (/** @type {?} */ (this.schema.value.type));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StFormFieldComponent.prototype, "min", {
        get: /**
         * @return {?}
         */
        function () {
            return this.schema.value.exclusiveMinimum ? this.schema.value.minimum + this.getInputStep() : this.schema.value.minimum;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StFormFieldComponent.prototype, "max", {
        get: /**
         * @return {?}
         */
        function () {
            return this.schema.value.exclusiveMaximum ? this.schema.value.maximum - this.getInputStep() : this.schema.value.maximum;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StFormFieldComponent.prototype, "label", {
        get: /**
         * @return {?}
         */
        function () {
            return this.schema.value.title;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StFormFieldComponent.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this.schema.value.examples && this.schema.value.examples[0] ? this.schema.value.examples[0] : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StFormFieldComponent.prototype, "default", {
        get: /**
         * @return {?}
         */
        function () {
            return this.schema.value.default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StFormFieldComponent.prototype, "description", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.showTooltip) {
                return this.schema.value.description;
            }
            else {
                return undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StFormFieldComponent.prototype, "minLength", {
        get: /**
         * @return {?}
         */
        function () {
            return this.schema.value.minLength;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StFormFieldComponent.prototype, "maxLength", {
        get: /**
         * @return {?}
         */
        function () {
            return this.schema.value.maxLength;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StFormFieldComponent.prototype, "pattern", {
        get: /**
         * @return {?}
         */
        function () {
            return this.schema.value.pattern;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} type
     * @return {?}
     */
    StFormFieldComponent.prototype.hasType = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        switch (type) {
            case 'input':
                return this.type === 'text' || this.type === 'number' || this.type === 'integer';
            case 'switch':
                return this.type === 'boolean' && this.hasDependencies;
            case 'checkbox':
                return this.type === 'boolean' && !this.hasDependencies;
            default:
                return this.type === type;
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    StFormFieldComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.innerValue = value;
        this.valueChange.emit(value);
        this.onChange(value);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    StFormFieldComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    StFormFieldComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} disable
     * @return {?}
     */
    StFormFieldComponent.prototype.setDisabledState = /**
     * @param {?} disable
     * @return {?}
     */
    function (disable) {
        if (this.templateModel && this.templateModel.control) {
            if (disable) {
                this.templateModel.control.disable();
            }
            else {
                this.templateModel.control.enable();
            }
        }
    };
    /**
     * @return {?}
     */
    StFormFieldComponent.prototype.getInputStep = /**
     * @return {?}
     */
    function () {
        if (this.schema.value.type === 'number') {
            return 0.1;
        }
        else {
            return 1;
        }
    };
    /**
     * @return {?}
     */
    StFormFieldComponent.prototype.getSelectOptions = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var options = [];
        if (this.schema.value.enum) {
            options.push((/** @type {?} */ ({ label: 'Select one option', value: undefined })));
            /** @type {?} */
            var enumValues = (/** @type {?} */ (this.schema.value.enum));
            enumValues.forEach((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                options.push((/** @type {?} */ ({ label: value, value: value })));
            }));
        }
        return options;
    };
    /**
     * @return {?}
     */
    StFormFieldComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.blur.emit();
    };
    /**
     * @private
     * @return {?}
     */
    StFormFieldComponent.prototype._loadErrorMessages = /**
     * @private
     * @return {?}
     */
    function () {
        this.errors = {
            required: (this.errorMessages && this.errorMessages.required) || this._defaultErrorMessages.required,
            pattern: (this.errorMessages && this.errorMessages.pattern) || this._defaultErrorMessages.pattern,
            generic: (this.errorMessages && this.errorMessages.generic) || this._defaultErrorMessages.generic,
            minLength: ((this.errorMessages && this.errorMessages.minLength) || this._defaultErrorMessages.minLength) + this.schema.value.minLength,
            maxLength: ((this.errorMessages && this.errorMessages.maxLength) || this._defaultErrorMessages.maxLength) + this.schema.value.maxLength,
            min: ((this.errorMessages && this.errorMessages.min) || this._defaultErrorMessages.min) + (this.min - this.getInputStep()),
            max: ((this.errorMessages && this.errorMessages.max) || this._defaultErrorMessages.max) + (this.max + this.getInputStep())
        };
    };
    var StFormFieldComponent_1;
    StFormFieldComponent.decorators = [
        { type: Component, args: [{
                    selector: 'st-form-field',
                    template: "<!--\n\n    \u00A9 2017 Stratio Big Data Inc., Sucursal en Espa\u00F1a.\n\n    This software is licensed under the Apache License, Version 2.0.\n    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n    See the terms of the License for more details.\n\n    SPDX-License-Identifier: Apache-2.0.\n\n-->\n\n<st-input *ngIf=\"hasType('input') && (!maxWidth || (!maxLength || maxLength < maxWidth) && (!minLength || minLength < maxWidth))\"\n          #templateModel=\"ngModel\"\n          [forceValidations]=\"forceValidations\"\n          [fieldType]=\"type\"\n          [label]=\"label\"\n          [name]=\"schema.key\"\n          [placeholder]=\"placeholder\"\n          [ngModel]=\"innerValue\"\n          (ngModelChange)=\"setValue($event)\"\n          [contextualHelp]=\"description\"\n          [errors]=\"errors\"\n          [default]=\"default\"\n          [max]=\"max\"\n          [min]=\"min\"\n          [minlength]=\"minLength\"\n          [maxlength]=\"maxLength\"\n          [required]=\"required\"\n          [pattern]=\"pattern\"\n          [step]=\"getInputStep()\"\n          [qaTag]=\"qaTag\"\n          (blur)=\"onBlur()\">\n</st-input>\n\n<st-textarea *ngIf=\"hasType('input') && maxWidth && (maxLength >= maxWidth || minLength >= maxWidth)\"\n          #templateModel=\"ngModel\"\n          [label]=\"label\"\n          [name]=\"schema.key\"\n          [default]=\"default\"\n          [placeholder]=\"placeholder\"\n          [ngModel]=\"innerValue\"\n          (ngModelChange)=\"setValue($event)\"\n          [contextualHelp]=\"description\"\n          [errors]=\"errors\"\n          [minlength]=\"minLength\"\n          [maxlength]=\"maxLength\"\n          [required]=\"required\"\n          [pattern]=\"pattern\"\n          [qaTag]=\"qaTag\"\n          (blur)=\"onBlur()\">\n</st-textarea>\n\n<st-checkbox *ngIf=\"hasType('checkbox')\"\n             #templateModel=\"ngModel\"\n             [ngModel]=\"innerValue\"\n             (ngModelChange)=\"setValue($event)\"\n             [checked]=\"innerValue\"\n             [value]=\"innerValue\"\n             [name]=\"schema.key\"\n             [contextualHelp]=\"description\"\n             [qaTag]=\"qaTag\"><span>{{schema.value.title}}</span>\n</st-checkbox>\n\n<st-select *ngIf=\"hasType('select')\"\n           #templateModel=\"ngModel\"\n           [label]=\"label\"\n           [tooltip]=\"description\"\n           [name]=\"schema.key\"\n           [placeholder]=\"placeholder\"\n           [default]=\"default\"\n           [options]=\"selectOptions\"\n           [ngModel]=\"innerValue\"\n           (ngModelChange)=\"setValue($event)\"\n           [required]=\"required\"\n           [id]=\"qaTag\">\n</st-select>\n\n<st-switch *ngIf=\"hasType('switch')\"\n           #templateModel=\"ngModel\"\n           [label]=\"schema.value.title\"\n           [name]=\"schema.key\"\n           [contextualHelp]=\"description\"\n           [ngModel]=\"innerValue\"\n           (ngModelChange)=\"setValue($event)\"\n           [value]=\"innerValue\"\n           [qaTag]=\"schema.key\"\n           [id]=\"qaTag\">\n</st-switch>\n",
                    providers: [
                        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return StFormFieldComponent_1; })), multi: true },
                        { provide: NG_VALIDATORS, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return StFormFieldComponent_1; })), multi: true }
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        class: 'st-form-field'
                    },
                    styles: ["@charset \"UTF-8\";"]
                }] }
    ];
    StFormFieldComponent.propDecorators = {
        schema: [{ type: Input }],
        required: [{ type: Input }],
        errorMessages: [{ type: Input }],
        qaTag: [{ type: Input }],
        name: [{ type: Input }],
        value: [{ type: Input }],
        hasDependencies: [{ type: Input }],
        forceValidations: [{ type: Input }],
        showTooltip: [{ type: Input }],
        maxWidth: [{ type: Input }],
        valueChange: [{ type: Output }],
        blur: [{ type: Output }],
        templateModel: [{ type: ViewChild, args: ['templateModel', { static: false },] }],
        readOnly: [{ type: HostBinding, args: ['class.read-only',] }]
    };
    tslib_1.__decorate([
        StRequired(),
        tslib_1.__metadata("design:type", Object)
    ], StFormFieldComponent.prototype, "schema", void 0);
    StFormFieldComponent = StFormFieldComponent_1 = tslib_1.__decorate([
        StEgeo()
    ], StFormFieldComponent);
    return StFormFieldComponent;
}());
export { StFormFieldComponent };
if (false) {
    /** @type {?} */
    StFormFieldComponent.prototype.schema;
    /** @type {?} */
    StFormFieldComponent.prototype.required;
    /** @type {?} */
    StFormFieldComponent.prototype.errorMessages;
    /** @type {?} */
    StFormFieldComponent.prototype.qaTag;
    /** @type {?} */
    StFormFieldComponent.prototype.name;
    /** @type {?} */
    StFormFieldComponent.prototype.value;
    /** @type {?} */
    StFormFieldComponent.prototype.hasDependencies;
    /** @type {?} */
    StFormFieldComponent.prototype.forceValidations;
    /** @type {?} */
    StFormFieldComponent.prototype.showTooltip;
    /** @type {?} */
    StFormFieldComponent.prototype.maxWidth;
    /** @type {?} */
    StFormFieldComponent.prototype.valueChange;
    /** @type {?} */
    StFormFieldComponent.prototype.blur;
    /** @type {?} */
    StFormFieldComponent.prototype.templateModel;
    /** @type {?} */
    StFormFieldComponent.prototype.disabled;
    /** @type {?} */
    StFormFieldComponent.prototype.focus;
    /** @type {?} */
    StFormFieldComponent.prototype.errorMessage;
    /** @type {?} */
    StFormFieldComponent.prototype.selectOptions;
    /** @type {?} */
    StFormFieldComponent.prototype.innerValue;
    /** @type {?} */
    StFormFieldComponent.prototype.errors;
    /**
     * @type {?}
     * @private
     */
    StFormFieldComponent.prototype._defaultErrorMessages;
    /** @type {?} */
    StFormFieldComponent.prototype.onChange;
    /** @type {?} */
    StFormFieldComponent.prototype.onTouched;
}
//# sourceMappingURL=data:application/json;base64,