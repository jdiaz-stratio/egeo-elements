/**
 * @fileoverview added by tsickle
 * Generated from: lib/st-table/st-table.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * © 2017 Stratio Big Data Inc., Sucursal en España.
 *
 * This software is licensed under the Apache License, Version 2.0.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the terms of the License for more details.
 *
 * SPDX-License-Identifier: Apache-2.0.
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output, TemplateRef, HostBinding, Host } from '@angular/core';
import { StEgeo, StRequired } from '../decorators/require-decorators';
import { Order, ORDER_TYPE } from './shared/order';
import { cloneDeep as _cloneDeep, get as _get } from 'lodash';
import { StTableIconClasses } from './st-table.interface';
/**
 * \@description {Component} [Table]
 *
 * The table component has been designed to display any content like images, text, graphs, etc.
 *
 * * \@model
 *
 *   [StTableHeader] {./shared/table-header.interface.ts#StTableHeader}
 *   [StDynamicTableHeader] {./shared/table-header.interface.ts#StFilterElement}
 *   [StFilterHeader] {./shared/table-header.interface.ts#StFilterHeader}
 *   [StTableFilterIconClasses] {./st-table.interface.ts#StTableFilterIconClasses}
 *   [StTableIconClasses] {./st-table.interface.ts#StTableIconClasses}
 *
 * \@example
 *
 * {html}
 *
 * ```
 * <st-table [fields]="fields" [sortable]="true" (changeOrder)="yourFunctionToOrder($event)">
 * <tr st-table-row *ngFor="let userData of data">
 * <td st-table-cell st-table-row-content>
 *    <label >{{userData.id}}</label>
 * </td>
 * <td st-table-cell st-table-row-content>
 *    <label >{{userData.name}}</label>
 * </td>
 * <td st-table-cell st-table-row-content>
 *    <label >{{userData.lastName}}</label>
 * </td>
 * <td st-table-cell st-table-row-content>
 *    <label >{{userData.phone}}</label>
 * </td>
 * <td st-table-cell st-table-row-content>
 *    <label >{{userData.company}}</label>
 * </td>
 * <td st-table-cell st-table-row-content>
 *    <label >{{userData.completedProfile}}</label>
 * </td>
 * <td st-table-row-hover>
 *    <i class="icon icon-arrow2_right"></i>
 * </td>
 * </tr>
 * </st-table>
 * ```
 *
 */
var StTableComponent = /** @class */ (function () {
    function StTableComponent(_cd) {
        this._cd = _cd;
        /**
         * \@Input {boolean} [header=true] Boolean to show or hide the header
         */
        this.header = true;
        /**
         * \@Input {boolean} [sortable=true] Boolean to make sortable the table, To enable sorting of columns use
         * the new "sortable" field inside stTableHeader model
         */
        this.sortable = true;
        /**
         * \@Input {boolean} [filterable=true] Boolean to make filterable the table, To enable filtering of columns use
         * the new "filterable" field inside stTableHeader model (necesary define filterConfig).
         */
        this.filterable = false;
        /**
         * \@Input {boolean} [selectableAll=false] Boolean to show or hide a checkbox in the header to select or
         *  deselect all rows
         */
        this.selectableAll = false;
        /**
         * \@Input {StTableIconClasses} [iconClasses=''] List of icon classes
         */
        this.iconClasses = new StTableIconClasses();
        /**
         * \@Output {Order} [changeOrder=''] Event emitted with the new order which has to be applied to the table rows
         */
        this.changeOrder = new EventEmitter();
        /**
         * \@Output {boolean} [selectAll=''] Event emitted when user interacts with the checkbox to select or deselect
         * all rows
         */
        this.selectAll = new EventEmitter();
        /**
         * \@Output {string} [clickFilter=] Event emitted when clicking on filters icon
         */
        this.clickFilter = new EventEmitter();
        /**
         * \@Output {StTableHeader[]} [selectFilters=''] Event emitted  when user interacts with filter button without a custom template
         */
        this.selectFilters = new EventEmitter();
        this.tableClasses = {};
        this.orderTypes = ORDER_TYPE;
        this.visibleFilter = -1;
        this._fixedHeader = false;
        this._hasHoverMenu = false;
    }
    Object.defineProperty(StTableComponent.prototype, "fixedHeader", {
        /** @Input {boolean} [fixedHeader=false] Boolean to fix the table header */
        get: /**
         * \@Input {boolean} [fixedHeader=false] Boolean to fix the table header
         * @return {?}
         */
        function () {
            return this._fixedHeader;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._fixedHeader = newValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StTableComponent.prototype, "customClasses", {
        /** @Input {string} [customClasses=] Classes for adding styles to table tag from outside. These can be: separated-rows */
        get: /**
         * \@Input {string} [customClasses=] Classes for adding styles to table tag from outside. These can be: separated-rows
         * @return {?}
         */
        function () {
            return this._customClasses;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this.tableClasses[this._customClasses] = undefined;
            this._customClasses = newValue;
            this.tableClasses[this._customClasses] = this._customClasses;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StTableComponent.prototype, "selectedAll", {
        /** @Input {boolean} [selectedAll=false] It specifies if all rows are selected */
        get: /**
         * \@Input {boolean} [selectedAll=false] It specifies if all rows are selected
         * @return {?}
         */
        function () {
            return this._selectedAll;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._selectedAll = newValue;
            this._cd.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StTableComponent.prototype, "hasHoverMenu", {
        /** @Input {boolean} [hasHoverMenu=false] It specifies if a menu has to be displayed when user puts the mouse over
         * the rows. Remember to add a cell with the selector st-table-row-hover for adding content to the menu
         */
        get: /**
         * \@Input {boolean} [hasHoverMenu=false] It specifies if a menu has to be displayed when user puts the mouse over
         * the rows. Remember to add a cell with the selector st-table-row-hover for adding content to the menu
         * @return {?}
         */
        function () {
            return this._hasHoverMenu;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._hasHoverMenu = newValue;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    StTableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.filterable && !this.statusFilter) {
            this.statusFilter = new Array(this.fields.length);
            this.statusFilter.fill(false);
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    StTableComponent.prototype.getHeaderItemClass = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var isOrderAsc = this.isSortedByFieldAndDirection(field, this.orderTypes.ASC);
        return isOrderAsc ? this.iconClasses.sort.asc : this.iconClasses.sort.desc;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    StTableComponent.prototype.isSortable = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field && field.sortable !== undefined ? field.sortable : this.sortable;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    StTableComponent.prototype.isSortedByField = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.currentOrder && this.currentOrder.orderBy === field.id;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    StTableComponent.prototype.isFilterable = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.filterable && (_get(field, 'filters.filterConfig')) ||
            (this.templateContentFilter && _get(field, 'filters')) ||
            _get(field, 'filters.templateRef');
    };
    /**
     * @param {?} index
     * @param {?} field
     * @return {?}
     */
    StTableComponent.prototype.onClickPopover = /**
     * @param {?} index
     * @param {?} field
     * @return {?}
     */
    function (index, field) {
        if (this.visibleFilter === index) {
            this.visibleFilter = -1;
        }
        else {
            this.visibleFilter = index;
        }
        this.clickFilter.emit(field);
        this._cd.markForCheck();
    };
    /**
     * @param {?} field
     * @return {?}
     */
    StTableComponent.prototype.onChangeOrder = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var _currentOrder;
        if (field && this.isSortable(field)) {
            if (this.currentOrder && this.currentOrder.orderBy === field.id) {
                _currentOrder = this.changeOrderDirection();
            }
            else {
                _currentOrder = new Order(field.id, ORDER_TYPE.ASC);
            }
            this.changeOrder.emit(_currentOrder);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    StTableComponent.prototype.onSelectAll = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.selectAll.emit(event.checked);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    StTableComponent.prototype.onSelectedFilters = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var selectedFilters = _cloneDeep(this.fields);
        selectedFilters = selectedFilters.filter((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            if (_get(field, 'filters.filterConfig')) {
                field.filters.filterConfig = field.filters.filterConfig.filter((/**
                 * @param {?} conf
                 * @return {?}
                 */
                function (conf) { return conf.selected; }));
                if (field.filters.filterConfig.length > 0) {
                    return field;
                }
            }
        }));
        this.selectFilters.emit(selectedFilters);
    };
    /**
     * @private
     * @return {?}
     */
    StTableComponent.prototype.changeOrderDirection = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newDirection = this.currentOrder.type === ORDER_TYPE.ASC ? ORDER_TYPE.DESC : ORDER_TYPE.ASC;
        return new Order(this.currentOrder.orderBy, newDirection);
    };
    /**
     * @private
     * @param {?} field
     * @param {?} orderType
     * @return {?}
     */
    StTableComponent.prototype.isSortedByFieldAndDirection = /**
     * @private
     * @param {?} field
     * @param {?} orderType
     * @return {?}
     */
    function (field, orderType) {
        return this.isSortedByField(field) && this.currentOrder.type === orderType;
    };
    StTableComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    StTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'st-table',
                    template: "<!--\n\n    \u00A9 2017 Stratio Big Data Inc., Sucursal en Espa\u00F1a.\n\n    This software is licensed under the Apache License, Version 2.0.\n    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n    See the terms of the License for more details.\n\n    SPDX-License-Identifier: Apache-2.0.\n\n-->\n<table class='st-table' [ngClass]=\"tableClasses\" [attr.id]='qaTag'>\n   <thead>\n      <tr *ngIf=\"header\" class='st-table__header'>\n\n         <th *ngFor='let field of fields; let i = index' class='st-table__header-item' [ngClass]=\"{\n             'st-table__header-item--selected': isSortedByField(field),\n             'st-table__header-item--sortable': isSortable(field),\n             'st-table__header-item--filterable': isFilterable(field)}\">\n            <st-checkbox *ngIf=\"i == 0 && selectableAll\" qaTag=\"select-all-checkbox\" class=\"st-table__checkbox\" name=\"selectAll\"\n                [checked]=\"selectedAll\" (change)=\"onSelectAll($event)\">\n            </st-checkbox>\n            <label class='st-table__header-text' (click)=\"onChangeOrder(field)\">\n               <i *ngIf=\"isSortedByField(field)\" class='st-table__order-arrow' [ngClass]=\"getHeaderItemClass(field)\">\n               </i>\n               {{field.label}}\n            </label>\n            <st-popover-filter *ngIf=\"isFilterable(field)\"\n               [field]=\"field\"\n               [index]=\"i\"\n               [templateContentFilter]=\"templateContentFilter\"\n               [filtered]=\"statusFilter[i]\"\n               [hidden]=\"visibleFilter !== i\"\n               [iconClasses]=\"iconClasses?.filter\"\n               (filter)=\"onSelectedFilters($event)\"\n               (click)=\"onClickPopover(i, field)\">\n            </st-popover-filter>\n         </th>\n         <th *ngIf=\"hasHoverMenu\"></th> <!-- For hover cell -->\n      </tr>\n   </thead>\n   <ng-content></ng-content>\n</table>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["@charset \"UTF-8\";.st-table{width:100%}.st-table__header-item{text-transform:capitalize;position:relative;vertical-align:bottom}.st-table__header-text{position:relative;height:100%;display:inline-flex;flex-direction:row;flex-wrap:nowrap;align-items:center;justify-content:flex-start;cursor:inherit}"]
                }] }
    ];
    /** @nocollapse */
    StTableComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    StTableComponent.propDecorators = {
        fields: [{ type: Input }],
        qaTag: [{ type: Input }],
        header: [{ type: Input }],
        sortable: [{ type: Input }],
        filterable: [{ type: Input }],
        selectableAll: [{ type: Input }],
        currentOrder: [{ type: Input }],
        templateContentFilter: [{ type: Input }],
        statusFilter: [{ type: Input }],
        iconClasses: [{ type: Input }],
        fixedHeader: [{ type: Input }, { type: HostBinding, args: ['class.st-custom-scrollbar',] }, { type: HostBinding, args: ['class.fixed-header',] }],
        customClasses: [{ type: Input }],
        selectedAll: [{ type: Input }],
        hasHoverMenu: [{ type: Input }],
        changeOrder: [{ type: Output }],
        selectAll: [{ type: Output }],
        clickFilter: [{ type: Output }],
        selectFilters: [{ type: Output }]
    };
    tslib_1.__decorate([
        StRequired(),
        tslib_1.__metadata("design:type", Array)
    ], StTableComponent.prototype, "fields", void 0);
    /**
     * \@description {Component} [Table]
     *
     * The table component has been designed to display any content like images, text, graphs, etc.
     *
     * * \@model
     *
     *   [StTableHeader] {./shared/table-header.interface.ts#StTableHeader}
     *   [StDynamicTableHeader] {./shared/table-header.interface.ts#StFilterElement}
     *   [StFilterHeader] {./shared/table-header.interface.ts#StFilterHeader}
     *   [StTableFilterIconClasses] {./st-table.interface.ts#StTableFilterIconClasses}
     *   [StTableIconClasses] {./st-table.interface.ts#StTableIconClasses}
     *
     * \@example
     *
     * {html}
     *
     * ```
     * <st-table [fields]="fields" [sortable]="true" (changeOrder)="yourFunctionToOrder($event)">
     * <tr st-table-row *ngFor="let userData of data">
     * <td st-table-cell st-table-row-content>
     *    <label >{{userData.id}}</label>
     * </td>
     * <td st-table-cell st-table-row-content>
     *    <label >{{userData.name}}</label>
     * </td>
     * <td st-table-cell st-table-row-content>
     *    <label >{{userData.lastName}}</label>
     * </td>
     * <td st-table-cell st-table-row-content>
     *    <label >{{userData.phone}}</label>
     * </td>
     * <td st-table-cell st-table-row-content>
     *    <label >{{userData.company}}</label>
     * </td>
     * <td st-table-cell st-table-row-content>
     *    <label >{{userData.completedProfile}}</label>
     * </td>
     * <td st-table-row-hover>
     *    <i class="icon icon-arrow2_right"></i>
     * </td>
     * </tr>
     * </st-table>
     * ```
     *
     */
    StTableComponent = tslib_1.__decorate([
        StEgeo(),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef])
    ], StTableComponent);
    return StTableComponent;
}());
export { StTableComponent };
if (false) {
    /**
     * \@Input {StTableHeader[]} [fields=''] List of field displayed in the header
     * @type {?}
     */
    StTableComponent.prototype.fields;
    /**
     * \@Input {string} [qaTag=''] Prefix used to generate the id values for qa tests
     * @type {?}
     */
    StTableComponent.prototype.qaTag;
    /**
     * \@Input {boolean} [header=true] Boolean to show or hide the header
     * @type {?}
     */
    StTableComponent.prototype.header;
    /**
     * \@Input {boolean} [sortable=true] Boolean to make sortable the table, To enable sorting of columns use
     * the new "sortable" field inside stTableHeader model
     * @type {?}
     */
    StTableComponent.prototype.sortable;
    /**
     * \@Input {boolean} [filterable=true] Boolean to make filterable the table, To enable filtering of columns use
     * the new "filterable" field inside stTableHeader model (necesary define filterConfig).
     * @type {?}
     */
    StTableComponent.prototype.filterable;
    /**
     * \@Input {boolean} [selectableAll=false] Boolean to show or hide a checkbox in the header to select or
     *  deselect all rows
     * @type {?}
     */
    StTableComponent.prototype.selectableAll;
    /**
     * \@Input {Order} [currentOrder=''] It specifies what is the current order applied to the table
     * @type {?}
     */
    StTableComponent.prototype.currentOrder;
    /**
     * \@Input {TemplateRef} [templateContentFilter=undefined] Reference to paint a custom template inside popover content
     * @type {?}
     */
    StTableComponent.prototype.templateContentFilter;
    /**
     * \@Input {boolean[]} [statusFilter=''] List of status filter by column, needed with templateContentFilter
     * @type {?}
     */
    StTableComponent.prototype.statusFilter;
    /**
     * \@Input {StTableIconClasses} [iconClasses=''] List of icon classes
     * @type {?}
     */
    StTableComponent.prototype.iconClasses;
    /**
     * \@Output {Order} [changeOrder=''] Event emitted with the new order which has to be applied to the table rows
     * @type {?}
     */
    StTableComponent.prototype.changeOrder;
    /**
     * \@Output {boolean} [selectAll=''] Event emitted when user interacts with the checkbox to select or deselect
     * all rows
     * @type {?}
     */
    StTableComponent.prototype.selectAll;
    /**
     * \@Output {string} [clickFilter=] Event emitted when clicking on filters icon
     * @type {?}
     */
    StTableComponent.prototype.clickFilter;
    /**
     * \@Output {StTableHeader[]} [selectFilters=''] Event emitted  when user interacts with filter button without a custom template
     * @type {?}
     */
    StTableComponent.prototype.selectFilters;
    /** @type {?} */
    StTableComponent.prototype.tableClasses;
    /** @type {?} */
    StTableComponent.prototype.orderTypes;
    /** @type {?} */
    StTableComponent.prototype.visibleFilter;
    /**
     * @type {?}
     * @private
     */
    StTableComponent.prototype._fixedHeader;
    /**
     * @type {?}
     * @private
     */
    StTableComponent.prototype._selectedAll;
    /**
     * @type {?}
     * @private
     */
    StTableComponent.prototype._hasHoverMenu;
    /**
     * @type {?}
     * @private
     */
    StTableComponent.prototype._customClasses;
    /**
     * @type {?}
     * @private
     */
    StTableComponent.prototype._cd;
}
//# sourceMappingURL=data:application/json;base64,