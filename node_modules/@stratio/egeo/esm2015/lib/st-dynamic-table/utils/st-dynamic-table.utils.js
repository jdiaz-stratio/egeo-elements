/**
 * @fileoverview added by tsickle
 * Generated from: lib/st-dynamic-table/utils/st-dynamic-table.utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * © 2017 Stratio Big Data Inc., Sucursal en España.
 *
 * This software is licensed under the Apache License, Version 2.0.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the terms of the License for more details.
 *
 * SPDX-License-Identifier: Apache-2.0.
 */
export class StDynamicTableUtils {
    /**
     * @param {?} jsonSchema
     * @param {?=} uiDefinitions
     * @return {?}
     */
    static getHeaderFieldsFromJsonSchema(jsonSchema, uiDefinitions) {
        /** @type {?} */
        const fields = [];
        if (jsonSchema && jsonSchema.properties) {
            /** @type {?} */
            const properties = Object.keys(jsonSchema.properties);
            if (properties) {
                properties.forEach((/**
                 * @param {?} _propertyKey
                 * @return {?}
                 */
                _propertyKey => {
                    /** @type {?} */
                    const _property = jsonSchema.properties[_propertyKey];
                    if (_property && _property.type !== 'object') {
                        /** @type {?} */
                        const uiDefinition = uiDefinitions && uiDefinitions[_propertyKey];
                        /** @type {?} */
                        const filters = StDynamicTableUtils.getHeaderFiltersFromJsonSchema(_property, uiDefinition);
                        /** @type {?} */
                        const isSortable = uiDefinition && uiDefinitions[_propertyKey].sortable;
                        fields.push({
                            id: _propertyKey,
                            label: _property.title || _propertyKey,
                            reference: _property.$ref,
                            fk: uiDefinition && uiDefinition.fk,
                            group: uiDefinition && uiDefinition.group_field ? uiDefinition.group_field.name : null,
                            filters: filters,
                            filterable: filters && (filters.templateRef !== undefined || (filters.filterConfig && filters.filterConfig.length > 0)),
                            sortable: isSortable
                        });
                    }
                }));
            }
        }
        return fields;
    }
    /**
     * @param {?} propertyDefinition
     * @param {?} uiDefinition
     * @return {?}
     */
    static getHeaderFiltersFromJsonSchema(propertyDefinition, uiDefinition) {
        /** @type {?} */
        let filters;
        if (propertyDefinition.enum && propertyDefinition.enum.length) {
            filters = {
                title: propertyDefinition.title,
                filterConfig: []
            };
            propertyDefinition.enum.forEach((/**
             * @param {?} _value
             * @return {?}
             */
            _value => {
                filters.filterConfig.push({
                    id: (/** @type {?} */ (_value)),
                    name: (/** @type {?} */ (_value))
                });
            }));
        }
        else if (uiDefinition && uiDefinition.templateRef) {
            filters = {
                title: propertyDefinition.title,
                templateRef: uiDefinition.templateRef
            };
        }
        return filters;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3QtZHluYW1pYy10YWJsZS51dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzdHJhdGlvL2VnZW8vIiwic291cmNlcyI6WyJsaWIvc3QtZHluYW1pYy10YWJsZS91dGlscy9zdC1keW5hbWljLXRhYmxlLnV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQWVBLE1BQU0sT0FBTyxtQkFBbUI7Ozs7OztJQUV0QixNQUFNLENBQUMsNkJBQTZCLENBQUMsVUFBdUIsRUFBRSxhQUEyQzs7Y0FDdkcsTUFBTSxHQUEyQixFQUFFO1FBRXpDLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxVQUFVLEVBQUU7O2tCQUNoQyxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDO1lBQ3JELElBQUksVUFBVSxFQUFFO2dCQUNiLFVBQVUsQ0FBQyxPQUFPOzs7O2dCQUFDLFlBQVksQ0FBQyxFQUFFOzswQkFDekIsU0FBUyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDO29CQUNyRCxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTs7OEJBQ3JDLFlBQVksR0FBa0MsYUFBYSxJQUFJLGFBQWEsQ0FBQyxZQUFZLENBQUM7OzhCQUMxRixPQUFPLEdBQW1CLG1CQUFtQixDQUFDLDhCQUE4QixDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUM7OzhCQUNyRyxVQUFVLEdBQUcsWUFBWSxJQUFJLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRO3dCQUV2RSxNQUFNLENBQUMsSUFBSSxDQUFDOzRCQUNULEVBQUUsRUFBRSxZQUFZOzRCQUNoQixLQUFLLEVBQUUsU0FBUyxDQUFDLEtBQUssSUFBSSxZQUFZOzRCQUN0QyxTQUFTLEVBQUUsU0FBUyxDQUFDLElBQUk7NEJBQ3pCLEVBQUUsRUFBRSxZQUFZLElBQUksWUFBWSxDQUFDLEVBQUU7NEJBQ25DLEtBQUssRUFBRSxZQUFZLElBQUksWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUk7NEJBQ3RGLE9BQU8sRUFBRSxPQUFPOzRCQUNoQixVQUFVLEVBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsS0FBSyxTQUFTLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDOzRCQUN2SCxRQUFRLEVBQUUsVUFBVTt5QkFDdEIsQ0FBQyxDQUFDO3FCQUNMO2dCQUNKLENBQUMsRUFBQyxDQUFDO2FBQ0w7U0FDSDtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2pCLENBQUM7Ozs7OztJQUVNLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQyxrQkFBK0IsRUFBRSxZQUEyQzs7WUFDbEgsT0FBdUI7UUFDM0IsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUM1RCxPQUFPLEdBQUc7Z0JBQ1AsS0FBSyxFQUFFLGtCQUFrQixDQUFDLEtBQUs7Z0JBQy9CLFlBQVksRUFBRSxFQUFFO2FBQ2xCLENBQUM7WUFDRixrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTzs7OztZQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUN0QyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztvQkFDdkIsRUFBRSxFQUFFLG1CQUFNLE1BQU0sRUFBQTtvQkFDaEIsSUFBSSxFQUFFLG1CQUFNLE1BQU0sRUFBQTtpQkFDcEIsQ0FBQyxDQUFDO1lBQ04sQ0FBQyxFQUFDLENBQUM7U0FDTDthQUFNLElBQUksWUFBWSxJQUFJLFlBQVksQ0FBQyxXQUFXLEVBQUU7WUFDbEQsT0FBTyxHQUFHO2dCQUNQLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxLQUFLO2dCQUMvQixXQUFXLEVBQUUsWUFBWSxDQUFDLFdBQVc7YUFDdkMsQ0FBQztTQUNKO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDbEIsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIMKpIDIwMTcgU3RyYXRpbyBCaWcgRGF0YSBJbmMuLCBTdWN1cnNhbCBlbiBFc3Bhw7FhLlxuICpcbiAqIFRoaXMgc29mdHdhcmUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC5cbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7XG4gKiB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLlxuICogU2VlIHRoZSB0ZXJtcyBvZiB0aGUgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wLlxuICovXG5cbmltcG9ydCB7IEpTT05TY2hlbWE0IH0gZnJvbSAnanNvbi1zY2hlbWEnO1xuaW1wb3J0IHsgU3REeW5hbWljVGFibGVIZWFkZXIsIFN0RHluYW1pY1RhYmxlVUlTcGVjaWZpY2F0aW9uLCBTdER5bmFtaWNUYWJsZVVzZXJJbnRlcmZhY2UgfSBmcm9tICcuLi9zdC1keW5hbWljLXRhYmxlLm1vZGVsJztcbmltcG9ydCB7IFN0RmlsdGVySGVhZGVyIH0gZnJvbSAnLi4vLi4vc3QtdGFibGUvc2hhcmVkL3RhYmxlLWhlYWRlci5pbnRlcmZhY2UnO1xuXG5leHBvcnQgY2xhc3MgU3REeW5hbWljVGFibGVVdGlscyB7XG5cbiAgIHB1YmxpYyBzdGF0aWMgZ2V0SGVhZGVyRmllbGRzRnJvbUpzb25TY2hlbWEoanNvblNjaGVtYTogSlNPTlNjaGVtYTQsIHVpRGVmaW5pdGlvbnM/OiBTdER5bmFtaWNUYWJsZVVzZXJJbnRlcmZhY2UpOiBTdER5bmFtaWNUYWJsZUhlYWRlcltdIHtcbiAgICAgIGNvbnN0IGZpZWxkczogU3REeW5hbWljVGFibGVIZWFkZXJbXSA9IFtdO1xuXG4gICAgICBpZiAoanNvblNjaGVtYSAmJiBqc29uU2NoZW1hLnByb3BlcnRpZXMpIHtcbiAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhqc29uU2NoZW1hLnByb3BlcnRpZXMpO1xuICAgICAgICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuZm9yRWFjaChfcHJvcGVydHlLZXkgPT4ge1xuICAgICAgICAgICAgICAgY29uc3QgX3Byb3BlcnR5ID0ganNvblNjaGVtYS5wcm9wZXJ0aWVzW19wcm9wZXJ0eUtleV07XG4gICAgICAgICAgICAgICBpZiAoX3Byb3BlcnR5ICYmIF9wcm9wZXJ0eS50eXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgY29uc3QgdWlEZWZpbml0aW9uOiBTdER5bmFtaWNUYWJsZVVJU3BlY2lmaWNhdGlvbiA9IHVpRGVmaW5pdGlvbnMgJiYgdWlEZWZpbml0aW9uc1tfcHJvcGVydHlLZXldO1xuICAgICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyczogU3RGaWx0ZXJIZWFkZXIgPSBTdER5bmFtaWNUYWJsZVV0aWxzLmdldEhlYWRlckZpbHRlcnNGcm9tSnNvblNjaGVtYShfcHJvcGVydHksIHVpRGVmaW5pdGlvbik7XG4gICAgICAgICAgICAgICAgICBjb25zdCBpc1NvcnRhYmxlID0gdWlEZWZpbml0aW9uICYmIHVpRGVmaW5pdGlvbnNbX3Byb3BlcnR5S2V5XS5zb3J0YWJsZTtcblxuICAgICAgICAgICAgICAgICAgZmllbGRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgaWQ6IF9wcm9wZXJ0eUtleSxcbiAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBfcHJvcGVydHkudGl0bGUgfHwgX3Byb3BlcnR5S2V5LFxuICAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlOiBfcHJvcGVydHkuJHJlZixcbiAgICAgICAgICAgICAgICAgICAgIGZrOiB1aURlZmluaXRpb24gJiYgdWlEZWZpbml0aW9uLmZrLFxuICAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IHVpRGVmaW5pdGlvbiAmJiB1aURlZmluaXRpb24uZ3JvdXBfZmllbGQgPyB1aURlZmluaXRpb24uZ3JvdXBfZmllbGQubmFtZSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzOiBmaWx0ZXJzLFxuICAgICAgICAgICAgICAgICAgICAgZmlsdGVyYWJsZTogZmlsdGVycyAmJiAoZmlsdGVycy50ZW1wbGF0ZVJlZiAhPT0gdW5kZWZpbmVkIHx8IChmaWx0ZXJzLmZpbHRlckNvbmZpZyAmJiBmaWx0ZXJzLmZpbHRlckNvbmZpZy5sZW5ndGggPiAwKSksXG4gICAgICAgICAgICAgICAgICAgICBzb3J0YWJsZTogaXNTb3J0YWJsZVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmaWVsZHM7XG4gICB9XG5cbiAgIHB1YmxpYyBzdGF0aWMgZ2V0SGVhZGVyRmlsdGVyc0Zyb21Kc29uU2NoZW1hKHByb3BlcnR5RGVmaW5pdGlvbjogSlNPTlNjaGVtYTQsIHVpRGVmaW5pdGlvbjogU3REeW5hbWljVGFibGVVSVNwZWNpZmljYXRpb24pOiBTdEZpbHRlckhlYWRlciB7XG4gICAgICBsZXQgZmlsdGVyczogU3RGaWx0ZXJIZWFkZXI7XG4gICAgICBpZiAocHJvcGVydHlEZWZpbml0aW9uLmVudW0gJiYgcHJvcGVydHlEZWZpbml0aW9uLmVudW0ubGVuZ3RoKSB7XG4gICAgICAgICBmaWx0ZXJzID0ge1xuICAgICAgICAgICAgdGl0bGU6IHByb3BlcnR5RGVmaW5pdGlvbi50aXRsZSxcbiAgICAgICAgICAgIGZpbHRlckNvbmZpZzogW11cbiAgICAgICAgIH07XG4gICAgICAgICBwcm9wZXJ0eURlZmluaXRpb24uZW51bS5mb3JFYWNoKF92YWx1ZSA9PiB7XG4gICAgICAgICAgICBmaWx0ZXJzLmZpbHRlckNvbmZpZy5wdXNoKHtcbiAgICAgICAgICAgICAgIGlkOiA8YW55PiBfdmFsdWUsXG4gICAgICAgICAgICAgICBuYW1lOiA8YW55PiBfdmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHVpRGVmaW5pdGlvbiAmJiB1aURlZmluaXRpb24udGVtcGxhdGVSZWYpIHtcbiAgICAgICAgIGZpbHRlcnMgPSB7XG4gICAgICAgICAgICB0aXRsZTogcHJvcGVydHlEZWZpbml0aW9uLnRpdGxlLFxuICAgICAgICAgICAgdGVtcGxhdGVSZWY6IHVpRGVmaW5pdGlvbi50ZW1wbGF0ZVJlZlxuICAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZpbHRlcnM7XG4gICB9XG59XG4iXX0=