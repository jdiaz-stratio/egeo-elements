/**
 * @fileoverview added by tsickle
 * Generated from: lib/st-checkbox/st-checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * © 2017 Stratio Big Data Inc., Sucursal en España.
 *
 * This software is licensed under the Apache License, Version 2.0.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the terms of the License for more details.
 *
 * SPDX-License-Identifier: Apache-2.0.
 */
import { Component, Input, Output, EventEmitter, forwardRef, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/** @type {?} */
export const CHECKBOX_CONTROL_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    // tslint:disable-next-line:no-use-before-declare
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => StCheckboxComponent)),
    multi: true
};
/**
 * \@description {Component} [Checkbox]
 *
 * The checkbox component represents a custom input of the checkbox type.
 *
 * \@example
 *
 * {html}
 *
 * ```
 * <st-checkbox name="option" value="1">
 *    Option 1
 * </st-checkbox>
 * ```
 *
 */
export class StCheckboxComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * \@Output {{ checked: boolean, value: any }} [change=''] This is emitted when user clicks on the checkbox
         */
        this.change = new EventEmitter();
        this._checked = false;
        this._controlValueAccessorChangeFn = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * \@Input {boolean} [checked='']
     * @return {?}
     */
    get checked() {
        return this._checked;
    }
    /**
     * @param {?} checked
     * @return {?}
     */
    set checked(checked) {
        if (checked !== this.checked) {
            this._checked = checked;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get labelQaTag() {
        return (this.qaTag || this.name) + '-label';
    }
    /**
     * @return {?}
     */
    handleClick() {
        if (!this.readonly) {
            if (!this.disabled) {
                this._checked = !this._checked;
                this._controlValueAccessorChangeFn(this._checked);
                this.change.emit({ checked: this.checked, value: this.value });
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleChange($event) {
        $event.stopPropagation();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._checked = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._controlValueAccessorChangeFn = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this._changeDetectorRef.markForCheck();
    }
}
StCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'st-checkbox',
                template: "<!--\n\n    \u00A9 2017 Stratio Big Data Inc., Sucursal en Espa\u00F1a.\n\n    This software is licensed under the Apache License, Version 2.0.\n    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n    See the terms of the License for more details.\n\n    SPDX-License-Identifier: Apache-2.0.\n\n-->\n<label st-label class=\"st-checkbox\" [ngClass]=\"{'disabled' : disabled}\" [attr.id]=\"labelQaTag\" [attr.title]=\"contextualHelp\">\n   <div class=\"st-checkbox-container\">\n      <input\n         type=\"checkbox\"\n         [id]=\"qaTag\"\n         [name]=\"name\"\n         [required]=\"required\"\n         [checked]=\"checked\"\n         [disabled]=\"disabled\"\n         [value]=\"value\"\n         [hidden]=\"true\"\n         [readonly]=\"readonly\"\n         (click)=\"handleClick()\"\n         (change)=\"handleChange($event)\" />\n   </div>\n   <div class=\"custom-checkbox st-checkbox-custom\" [ngClass]=\"{'icon-check2' : checked}\"></div><ng-content></ng-content>\n</label>\n",
                providers: [CHECKBOX_CONTROL_ACCESSOR],
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
StCheckboxComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
StCheckboxComponent.propDecorators = {
    checked: [{ type: Input }],
    name: [{ type: Input }],
    qaTag: [{ type: Input }],
    disabled: [{ type: Input }],
    required: [{ type: Input }],
    readonly: [{ type: Input }],
    value: [{ type: Input }],
    contextualHelp: [{ type: Input }],
    change: [{ type: Output }]
};
if (false) {
    /**
     * \@Input {boolean} [name=''] This parameter shows the final name of the input
     * @type {?}
     */
    StCheckboxComponent.prototype.name;
    /**
     * \@Input {boolean} [qaTag=''] Id value for qa test
     * @type {?}
     */
    StCheckboxComponent.prototype.qaTag;
    /**
     * \@Input {boolean} [disabled=''] It allows to disable the input component of the checkbox
     * @type {?}
     */
    StCheckboxComponent.prototype.disabled;
    /**
     * \@Input {boolean} [required=''] It converts the component into a mandatory field in a form
     * @type {?}
     */
    StCheckboxComponent.prototype.required;
    /**
     * \@Input {boolean} [readonly=''] This parameter disables the checkbox and it can not be modified by the user
     * @type {?}
     */
    StCheckboxComponent.prototype.readonly;
    /**
     * \@Input {any} [value=''] The value of the checkbox
     * @type {?}
     */
    StCheckboxComponent.prototype.value;
    /**
     * \@Input {string} [contextualHelp=''] Information displayed at a tooltip
     * @type {?}
     */
    StCheckboxComponent.prototype.contextualHelp;
    /**
     * \@Output {{ checked: boolean, value: any }} [change=''] This is emitted when user clicks on the checkbox
     * @type {?}
     */
    StCheckboxComponent.prototype.change;
    /**
     * @type {?}
     * @private
     */
    StCheckboxComponent.prototype._checked;
    /** @type {?} */
    StCheckboxComponent.prototype._controlValueAccessorChangeFn;
    /** @type {?} */
    StCheckboxComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    StCheckboxComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,