/**
 * @fileoverview added by tsickle
 * Generated from: lib/st-pagination/st-pagination.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * © 2017 Stratio Big Data Inc., Sucursal en España.
 *
 * This software is licensed under the Apache License, Version 2.0.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the terms of the License for more details.
 *
 * SPDX-License-Identifier: Apache-2.0.
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ElementRef } from '@angular/core';
/**
 * \@description {Component} [Table]
 *
 * The pagination component has been designed to allow content to be displayed per pages. This informs user about the
 * number of the current page, the items displayed per page and the total of items. Moreover, when there are a lot of
 * items, it allows user to customize the number of items displayed per page.
 *
 * It is made by two sub-components:
 * - A range selector, that allows the user provides a dropdown to set how many items he wants to be displayed per page.
 * - A page navigation control, in order to let the user where he is and where he can go to.
 *
 * * \@model
 *
 *   [Paginate] {./st-pagination.interface.ts#Paginate}
 *   [PaginateOptions] {./st-pagination.interface.ts#PaginateOptions}
 *   [PaginateTexts] {./st-pagination.interface.ts#PaginateTexts}
 *   [PaginateTextsSchema] {./st-pagination.interface.ts#PaginateTextsSchema}
 *   [PaginateIconClasses] {./st-pagination.interface.ts#PaginateIconClasses}
 *
 * \@example
 *
 * {html}
 *
 * ```
 * <div class="pagination">
 *     <st-pagination [total]="items.length" [perPage]="perPage" [currentPage]="page" [id]="'pagination-demo'"
 *     (change)="onChangePage($event)">
 *     </st-pagination>
 *     </div>
 * ```
 *
 */
export class StPaginationComponent {
    /**
     * @param {?} _cd
     * @param {?} _paginationElement
     */
    constructor(_cd, _paginationElement) {
        this._cd = _cd;
        this._paginationElement = _paginationElement;
        /**
         * \@Input {number} [perPage=20] The maximum number of items displayed per page
         */
        this.perPage = 20;
        /**
         * \@Input {PaginateTexts} [label={element: 'Rows', perPage: 'per page', of: 'of'}] Translated texts displayed at the pagination
         */
        this.label = {
            element: 'Rows', perPage: 'per page', of: 'of'
        };
        /**
         * \@Input {PaginateOptions[]}
         * [perPageOptions=Array( Object( value: 20, showFrom: 0 ),Object( value: 50, showFrom: 50 ), Object( value: 200, showFrom: 200 ))]
         *  List of options displayed at a selector where user can change the number of items displayed per page
         */
        this.perPageOptions = [
            { value: 20, showFrom: 0 }, { value: 50, showFrom: 50 }, { value: 200, showFrom: 200 }
        ];
        /**
         * \@Input {PaginateIconClasses} [iconClasses=Object(previous='', next='')] Icon classes for previous and next page buttons
         */
        this.iconClasses = { previous: 'icon-arrow2_left', next: 'icon-arrow2_right' };
        /**
         * \@Output {Paginate} [change=''] Event emitted when user interacts with some of the elements in the pagination.
         *  This sends the new pagination status (current page and items per page)
         */
        this.change = new EventEmitter();
        /**
         * \@Output {PaginateOptions} [changePerPage='']  Event emitted when user interacts with some of the elements in the selector of items displayed per page.
         * This sends the current items per page.
         */
        this.changePerPage = new EventEmitter();
        this.disableNextButton = false;
        this.disablePrevButton = true;
        this.items = [];
        this._currentPage = 1;
    }
    /**
     * \@Input {number} [currentPage=1] Number of the current page
     * @return {?}
     */
    get currentPage() {
        return this._currentPage;
    }
    /**
     * @param {?} currentPage
     * @return {?}
     */
    set currentPage(currentPage) {
        this._currentPage = currentPage;
    }
    /**
     * @return {?}
     */
    get hasOptions() {
        return this.items && this.items.length > 1;
    }
    /**
     * @return {?}
     */
    get paginationId() {
        /** @type {?} */
        const pagination = this._paginationElement.nativeElement;
        return pagination.getAttribute('id') !== null ? pagination.id : null;
    }
    /**
     * @return {?}
     */
    get selectId() {
        return this.paginationId !== null ? `${this.paginationId}-select` : null;
    }
    /**
     * @return {?}
     */
    get buttonPrevId() {
        return this.paginationId !== null ? `${this.paginationId}-prev` : null;
    }
    /**
     * @return {?}
     */
    get buttonNextId() {
        return this.paginationId !== null ? `${this.paginationId}-next` : null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.updatePages(false);
        this.generateItems();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.total && changes.total.previousValue !== changes.total.currentValue && !changes.total.firstChange) {
            this.generateItems();
            this.updatePages(false);
        }
        if (changes.currentPage && changes.currentPage.previousValue !== changes.currentPage.currentValue && !changes.currentPage.firstChange) {
            this._currentPage = changes.currentPage.currentValue;
            this.updatePages(false);
        }
        if (changes.perPage && changes.perPage.previousValue !== changes.perPage.currentValue && !changes.perPage.firstChange) {
            this.onChangePerPage(changes.perPage.currentValue);
        }
    }
    /**
     * @return {?}
     */
    generateItems() {
        this.items = [];
        this.perPageOptions.forEach(this.addPageOption.bind(this));
        if (this.items.length) {
            this.selectedItem = this.items.find((/**
             * @param {?} item
             * @return {?}
             */
            item => item.value === this.perPage)) || this.items[0];
        }
        this._cd.markForCheck();
    }
    /**
     * @return {?}
     */
    nextPage() {
        this.currentPage++;
        this.updatePages();
    }
    /**
     * @return {?}
     */
    prevPage() {
        this.currentPage--;
        this.updatePages();
    }
    /**
     * @param {?} perPage
     * @return {?}
     */
    onChangePerPage(perPage) {
        if (perPage && typeof perPage === 'number') {
            this.currentPage = 1;
            this.perPage = perPage;
            this.updatePages();
            this.selectedItem = this.items.find((/**
             * @param {?} item
             * @return {?}
             */
            item => item.value === this.perPage));
            this.changePerPage.emit(this.perPage);
        }
    }
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    addPageOption(option) {
        if (this.total && (!option.showFrom || option.showFrom <= this.total)) {
            this.items.push({
                label: `${option.value}`,
                value: option.value
            });
        }
    }
    /**
     * @private
     * @param {?=} emit
     * @return {?}
     */
    updatePages(emit = true) {
        this.lastItem = this.perPage * this._currentPage;
        if (this.currentPage === 1) {
            this.firstItem = this._currentPage;
            this.disablePrevButton = true;
        }
        else {
            this.firstItem = this.perPage * (this._currentPage - 1) + 1;
            this.disablePrevButton = false;
        }
        if (this.lastItem >= this.total) {
            this.lastItem = this.total;
            this.disableNextButton = true;
        }
        else {
            this.disableNextButton = false;
        }
        if (emit) {
            this.change.emit({
                currentPage: this._currentPage,
                perPage: this.perPage
            });
        }
    }
}
StPaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'st-pagination',
                template: "<!--\n\n    \u00A9 2017 Stratio Big Data Inc., Sucursal en Espa\u00F1a.\n\n    This software is licensed under the Apache License, Version 2.0.\n    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n    See the terms of the License for more details.\n\n    SPDX-License-Identifier: Apache-2.0.\n\n-->\n<div class=\"st-pagination pagination\">\n   <div *ngIf=\"hasOptions\" class=\"label st-pagination__per-page\">\n      <p class=\"st-pagination__label\">{{label.element}} {{label.perPage}}</p>\n      <st-select class=\"st-pagination__selector\" [options]=\"items\" [selected]=\"selectedItem\" (select)=\"onChangePerPage($event)\" [attr.id]=\"selectId\"></st-select>\n   </div>\n\n   <div class=\"label current-page-info\">\n      <p class=\"st-pagination__label\">{{firstItem}}-{{lastItem}} {{label.of || 'of'}} {{total}}</p>\n\n      <div class=\"buttons\">\n         <button class=\"button button-toolbar\" [attr.id]=\"buttonPrevId\" [disabled]=\"disablePrevButton\" type=\"button\" (click)=\"prevPage()\">\n            <i class=\"{{iconClasses?.previous || 'icon-arrow2_left'}}\"></i>\n         </button>\n         <button class=\"button button-toolbar\" [attr.id]=\"buttonNextId\" [disabled]=\"disableNextButton\" type=\"button\" (click)=\"nextPage()\">\n            <i class=\"{{iconClasses?.next || 'icon-arrow2_right'}}\"></i>\n         </button>\n      </div>\n   </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["@charset \"UTF-8\";.pagination{display:flex;align-items:center;height:42px}.pagination .label{display:flex;align-items:center}.pagination .label p{margin:0;padding-right:15px}.pagination .current-page-info{flex:1;justify-content:flex-end}.pagination .st-pagination__selector{max-width:93px}.pagination button:first-child{margin:0 5px}"]
            }] }
];
/** @nocollapse */
StPaginationComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
StPaginationComponent.propDecorators = {
    perPage: [{ type: Input }],
    total: [{ type: Input }],
    label: [{ type: Input }],
    perPageOptions: [{ type: Input }],
    iconClasses: [{ type: Input }],
    change: [{ type: Output }],
    changePerPage: [{ type: Output }],
    currentPage: [{ type: Input }]
};
if (false) {
    /**
     * \@Input {number} [perPage=20] The maximum number of items displayed per page
     * @type {?}
     */
    StPaginationComponent.prototype.perPage;
    /**
     * \@Input {number} [total=''] Total of items
     * @type {?}
     */
    StPaginationComponent.prototype.total;
    /**
     * \@Input {PaginateTexts} [label={element: 'Rows', perPage: 'per page', of: 'of'}] Translated texts displayed at the pagination
     * @type {?}
     */
    StPaginationComponent.prototype.label;
    /**
     * \@Input {PaginateOptions[]}
     * [perPageOptions=Array( Object( value: 20, showFrom: 0 ),Object( value: 50, showFrom: 50 ), Object( value: 200, showFrom: 200 ))]
     *  List of options displayed at a selector where user can change the number of items displayed per page
     * @type {?}
     */
    StPaginationComponent.prototype.perPageOptions;
    /**
     * \@Input {PaginateIconClasses} [iconClasses=Object(previous='', next='')] Icon classes for previous and next page buttons
     * @type {?}
     */
    StPaginationComponent.prototype.iconClasses;
    /**
     * \@Output {Paginate} [change=''] Event emitted when user interacts with some of the elements in the pagination.
     *  This sends the new pagination status (current page and items per page)
     * @type {?}
     */
    StPaginationComponent.prototype.change;
    /**
     * \@Output {PaginateOptions} [changePerPage='']  Event emitted when user interacts with some of the elements in the selector of items displayed per page.
     * This sends the current items per page.
     * @type {?}
     */
    StPaginationComponent.prototype.changePerPage;
    /** @type {?} */
    StPaginationComponent.prototype.disableNextButton;
    /** @type {?} */
    StPaginationComponent.prototype.disablePrevButton;
    /** @type {?} */
    StPaginationComponent.prototype.firstItem;
    /** @type {?} */
    StPaginationComponent.prototype.lastItem;
    /** @type {?} */
    StPaginationComponent.prototype.items;
    /** @type {?} */
    StPaginationComponent.prototype.selectedItem;
    /**
     * @type {?}
     * @private
     */
    StPaginationComponent.prototype._currentPage;
    /**
     * @type {?}
     * @private
     */
    StPaginationComponent.prototype._cd;
    /**
     * @type {?}
     * @private
     */
    StPaginationComponent.prototype._paginationElement;
}
//# sourceMappingURL=data:application/json;base64,